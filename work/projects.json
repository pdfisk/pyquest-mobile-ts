[
    {
        "id": 383,
        "name": "001_hello_world",
        "description": "# 2024-06-12 16:51",
        "code": "# Print a simple message\n\n# Automatically switch to the Transcript tab.\nautotab('transcript')\n\n# Use the 'print' statement for output\nprint('Hello World!', 33 > 4, 3 > 4)\n",
        "created_at": "2024-08-06T18:00:54.287Z",
        "updated_at": "2024-08-06T18:00:54.287Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 384,
        "name": "002_arithmetic_operators",
        "description": "# 2024-06-12 16:51",
        "code": "# Basic arithmetic examples\n\n# Automatically switch to the Transcript tab.\nautotab('transcript')\n\n# Addition, subtraction, multiplication, division\nprint('3 + 4', 3 + 4)  # addition        # = 7\nprint('3 - 4', 3 - 4)  # subtraction     # = -1\nprint('3 * 4', 3 * 4)  # multiplication  # = 12\nprint('3 / 4', 3 / 4)  # division        # = 0.75\nprint('33 % 4', 33 % 4)  # modulo          # = 1\n\n# Operator precedence\nprint('3 + 4 * 5', 3 + 4 * 5)  # = 23\nprint('3 + 4 * 5', (3 + 4) * 5)  # = 35\n\nprint('done')\n",
        "created_at": "2024-08-06T18:00:54.398Z",
        "updated_at": "2024-08-06T18:00:54.398Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 385,
        "name": "003_comparison_operators",
        "description": "# 2024-06-12 16:51",
        "code": "# Basic comparison examples\n\n# Automatically switch to the Transcript tab.\nautotab('transcript')\n\n# Comparisons\nprint('3 < 4', 3 < 4)  # less than               # True\nprint('3 <= 4', 3 <= 4)  # less than or equal     # True\nprint('3 == 4', 3 == 4)  # equal                  # False\nprint('3 >= 4', 3 >= 4)  # greater than or equal  # False\nprint('3 > 4', 3 > 4)  # greater than            # False\n\nprint('done')\n",
        "created_at": "2024-08-06T18:00:54.480Z",
        "updated_at": "2024-08-06T18:00:54.480Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 386,
        "name": "004_variables_assignments",
        "description": "# 2024-06-12 16:51",
        "code": "# Assign values to variables\n\n# Automatically switch to the Transcript tab.\nautotab('transcript')\n\n# Assign values\na = 3\nb = 4\nc = 5\n\n# Addition, subtraction, multiplication, division\nprint(a + b)  # addition        # = 7\nprint(a - b)  # subtraction     # = -1\nprint(a * b)  # multiplication  # = 12\nprint(a / b)  # division        # = 0.75\n\n# Operator precedence\nprint(a + b * c)  # = 23\nprint((a + b) * c)  # = 35\n\nprint('done')\n",
        "created_at": "2024-08-06T18:00:54.564Z",
        "updated_at": "2024-08-06T18:00:54.564Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 387,
        "name": "005_if_elif_else_statements",
        "description": "# 2024-06-12 16:51",
        "code": "# If statement\n\nautotab('transcript')\n\n# Assign values to variables\na = 3\nb = 4\n\n# if, elif, and else\nif a > b:\n    print(a, 'is greater than', b)\nelif a == b:\n    print(a, 'is equal to', b)\nelse:\n    print(a, 'is less than', b)\n\nprint('done')\n",
        "created_at": "2024-08-06T18:00:54.646Z",
        "updated_at": "2024-08-06T18:00:54.646Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 388,
        "name": "006_while_statement",
        "description": "# 2024-06-12 16:51",
        "code": "# Iteration using the 'while' statement\n\nautotab('transcript')\n\nx = 0\n\nwhile x <= 10:\n    x = x + 1\n    if x % 2 == 0:\n        print(x, 'is even')\n    else:\n        print(x, 'is odd')\n\nprint('done')\n",
        "created_at": "2024-08-06T18:00:54.733Z",
        "updated_at": "2024-08-06T18:00:54.733Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 389,
        "name": "007_for_statement",
        "description": "# 2024-06-12 16:51",
        "code": "# Looping using the 'for' statement\n\nautotab('transcript')\n\nfor x in range(11):\n    if x == 3:\n        continue\n    if x > 7:\n        break\n    if x % 2 == 0:\n        print(x, 'is even')\n    else:\n        print(x, 'is odd')\n\nprint('done')\n",
        "created_at": "2024-08-06T18:00:54.815Z",
        "updated_at": "2024-08-06T18:00:54.815Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 390,
        "name": "008_break_statement",
        "description": "# 2024-06-12 16:51",
        "code": "# Exiting a 'while' loop using 'break'\n\nautotab('transcript')\n\nx = 0\n\nwhile x <= 10:\n    x = x + 1\n    print('x =', x)\n    if x > 7:\n        break\n    if x % 2 == 0:\n        print(x, 'is even')\n    else:\n        print(x, 'is odd')\n\nprint('done')\n",
        "created_at": "2024-08-06T18:00:54.900Z",
        "updated_at": "2024-08-06T18:00:54.900Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 391,
        "name": "009_continue_statement",
        "description": "# 2024-06-12 16:51",
        "code": "# Ignoring statements in a 'while' loop using 'continue'\n\nautotab('transcript')\n\nx = 0\n\nwhile x <= 10:\n    x = x + 1\n    print('x =', x)\n    if x > 7:\n        continue\n    if x % 2 == 0:\n        print(x, 'is even')\n    else:\n        print(x, 'is odd')\n\nprint('done')\n",
        "created_at": "2024-08-06T18:00:54.982Z",
        "updated_at": "2024-08-06T18:00:54.982Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 392,
        "name": "010_tictactoe",
        "description": "# 2024-06-12 16:51",
        "code": "# TicTacToe game.\n\nautotab('board')\nnext_player = 'human'\nplayer_mark = 'X'\n\n\ndef switch_player():\n    global next_player, player_mark\n    if next_player == 'human':\n        next_player = 'computer'\n        player_mark = 'O'\n    else:\n        next_player = 'human'\n        player_mark = 'X'\n\n\ndef play_next():\n    message('toast', next_player, 'plays', player_mark)\n\n\ndef tictactoe_click_handler(row, col, text):\n    if text == 'X':\n        message('toast', 'Tile already taken.')\n    elif text == 'O':\n        message('toast', 'Tile already taken.')\n    else:\n        board('set_tile_text', row, col, player_mark)\n        switch_player()\n        play_next()\n\n\nboard('set_handler', 'tile_clicked', tictactoe_click_handler)\nboard('clear')\n\nplay_next()\n",
        "created_at": "2024-08-06T18:00:55.070Z",
        "updated_at": "2024-08-06T18:00:55.070Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 393,
        "name": "011_class_statement",
        "description": "# 2024-06-12 16:51",
        "code": "# Class statement.\n\nautotab('transcript')\n\n\nclass SimpleTicTacToe():\n\n    def __init__(self):\n        print('__init__')\n        self.init_cells()\n        self.init_winning_combos()\n        self.new_game(...)\n\n    def init_cells(self):\n        print('init_cells')\n\n    def init_winning_combos(self):\n        print('init_winning_combos')\n\n    def new_game(self, event):\n        print('new_game')\n\n    def next_turn(self):\n        print('next_turn')\n\n    def check_winner(self):\n        print('check_winner')\n\n    def get_winner(self, combo):\n        print('get_winner')\n\n    def set_cell(self, i, j, value):\n        print('set_cell')\n\n    def get_cell(self, i, j):\n        print('get_cell')\n\n    def click(self, event):\n        print('click')\n\n    def clear_terminal(self):\n        print('clear_terminal')\n\n    def toggle_terminal(self, event):\n        print('toggle_terminal')\n\n\nGAME = SimpleTicTacToe()\n",
        "created_at": "2024-08-06T18:00:55.163Z",
        "updated_at": "2024-08-06T18:00:55.163Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 394,
        "name": "012_tictactoe_class",
        "description": "# 2024-06-12 16:51",
        "code": "# Python class for TicTacToe game..\n\nautotab('board')\n\n\nclass TicTacToe():\n\n    def __init__(self):\n        print('__init__')\n        self.init_cells()\n        self.init_winning_combos()\n        board('set_handler', 'tile_clicked', self.tictactoe_click_handler)\n        self.new_game(...)\n\n    # def set_status(self, text):\n    #     self.status.html = text\n\n    def tictactoe_click_handler(row, col, text):\n        print('tictactoe_click_handler', row, col, text, GAME.current_player)\n        if text == 'X':\n            message('toast', 'Tile already taken.')\n            return\n        elif text == 'O':\n            message('toast', 'Tile already taken.')\n            return\n        else:\n            board('set_tile_text', row, col, GAME.current_player)\n            GAME.set_cell_value(row, col, GAME.current_player)\n        winner = GAME.check_winner()\n        if winner == '':\n            GAME.switch_player()\n            GAME.next_turn()\n        else:\n            message('toast', 'The winner is', winner)\n\n    def init_cells(self):\n        print('init_cells')\n        self.cells = []\n        for i in range(3):\n            row = []\n            for j in range(3):\n                cell = {'row': i, 'column': j, 'value': '<empty>'}\n                row.append(cell)\n            self.cells.append(row)\n\n    def init_winning_combos(self):\n        print('init_winning_combos')\n        self.winning_combos = []\n\n        # winning columns\n        for i in range(3):\n            combo = []\n            for j in range(3):\n                combo.append({'row': i, 'column': j})\n            self.winning_combos.append(combo)\n\n        # winning rows\n        for j in range(3):\n            combo = []\n            for i in range(3):\n                combo.append({'row': i, 'column': j})\n            self.winning_combos.append(combo)\n\n        # winning diagonals\n        self.winning_combos.append([{'row': 0, 'column': 0}, {'row': 1, 'column': 1}, {'row': 2, 'column': 2}])\n        self.winning_combos.append([{'row': 0, 'column': 2}, {'row': 1, 'column': 1}, {'row': 2, 'column': 0}])\n\n    def new_game(self, event):\n        print('NEW GAME STARTING')\n        board('clear')\n        for i in range(3):\n            row = self.cells[i]\n            for j in range(3):\n                self.set_cell_value(i, j, '<empty>')\n        self.current_player = 'O'\n        self.next_turn()\n\n    def next_turn(self):\n        print('next_turn')\n        if self.current_player == 'X':\n            self.current_player = 'O'\n            self.current_player_name = 'computer'\n        else:\n            self.current_player = 'X'\n            self.current_player_name = 'human'\n        message('toast', self.current_player_name, 'plays', self.current_player)\n        # self.set_status(f'{self.current_player} playing...')\n\n    def switch_player(self):\n        print('switch_player', self.current_player, self.current_player_name)\n        # if self.current_player == 'X':\n        #     self.current_player = 'O'\n        #     self.current_player_name = 'computer'\n        # else:\n        #     self.current_player = 'X'\n        #     self.current_player_name = 'human'\n        # print('switch_player2', self.current_player, self.current_player_name)\n\n    def check_winner(self):\n        print('check_winner')\n        # Check whether the game as any winner.\n        # Return 'X', 'O', 'tie' or None. None means that the game is still playing.\n        for i in range(len(self.winning_combos)):\n            combo = self.winning_combos[i]\n            winner = self.get_winner(combo)\n            if winner == 'X' or winner == 'O':\n                return winner\n        for i in range(3):\n            for j in range(3):\n                value = self.get_cell_value(i, j)\n                if value == '<empty>':\n                    return ''\n        return 'tie'\n\n    def get_winner(self, combo):\n        print('get_winner')\n        values = []\n        for i in range(3):\n            combo_item = combo[i]\n            row = combo_item['row']\n            column = combo_item['column']\n            value = self.get_cell_value(row, column)\n            cell = self.get_cell(row, column)\n            values.append(value)\n        winner = values[0]\n        if not (winner == 'X' or winner == 'O'):\n            return ''\n        for i in range(1, 3):\n            if values[i] != winner:\n                return ''\n        return winner\n\n    def set_cell_value(self, i, j, value):\n        print('set_cell_value', i, j, value)\n        cell = self.get_cell(i, j)\n        cell['value'] = value\n\n    def get_cell(self, i, j):\n        cell = self.cells[i][j]\n        return cell\n\n    def get_cell_value(self, i, j):\n        cell = self.get_cell(i, j)\n        return cell['value']\n\n\nGAME = TicTacToe()\n",
        "created_at": "2024-08-06T18:00:55.249Z",
        "updated_at": "2024-08-06T18:00:55.249Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 395,
        "name": "013_temp",
        "description": "# 2024-06-12 16:51",
        "code": "# TicTacToe class.\n\nautotab('transcript')\n\n\nclass TestClass():\n\n    def __init__(self):\n        print('__init__', self)\n        self.init_cells()\n\n    def init_cells(self):\n        print('init_cells')\n\n    def hello(self, msg):\n        print('hello', msg)\n\n\nGAME = TestClass()\nGAME.cells = ['a', 'b', 'c', 'd', 'e']\nGAME.hello('DUDE!')\nprint(GAME.cells)\n",
        "created_at": "2024-08-06T18:00:55.344Z",
        "updated_at": "2024-08-06T18:00:55.344Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 396,
        "name": "014_attributes",
        "description": "# 2024-06-12 16:51",
        "code": "# Attributes.\n\nautotab('transcript')\n\nx = ['a', 'b', 'c']\nx.append('d')\nprint(x)\n\nx = [['A1', 'A2', 'A3'], ['B1', 'B2', 'B3'], ['C1', 'C2', 'C3']]\nprint(x[2][1])\n",
        "created_at": "2024-08-06T18:00:55.440Z",
        "updated_at": "2024-08-06T18:00:55.440Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 397,
        "name": "015_return",
        "description": "# 2024-06-12 16:51",
        "code": "# Return statement.\n\nautotab('transcript')\n\n\ndef abc(x):\n    if x > 5:\n        return 'GREATER THAN 5'\n    else:\n        return 'LESS THAN OR EQUAL TO 5'\n\n\nprint(abc(3))\nprint(abc(10))\n",
        "created_at": "2024-08-06T18:00:55.525Z",
        "updated_at": "2024-08-06T18:00:55.525Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 398,
        "name": "016_array_iteration",
        "description": "# 2024-06-12 16:51",
        "code": "# List iteration.\n\nautotab('transcript')\n\nx = [1, 2, 3]\nprint(type(x))\nfor i in x:\n    print(i)\n",
        "created_at": "2024-08-06T18:00:55.613Z",
        "updated_at": "2024-08-06T18:00:55.613Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 399,
        "name": "017_tuple_iteration",
        "description": "# 2024-06-12 16:51",
        "code": "# Tuple iteration.\n\nautotab('transcript')\n\nx = (1, 2, 3,)\nprint(type(x))\nfor i in x:\n    print(i)\n",
        "created_at": "2024-08-06T18:00:55.700Z",
        "updated_at": "2024-08-06T18:00:55.700Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 400,
        "name": "018_slices",
        "description": "# 2024-06-12 16:51",
        "code": "# Slices.\n\nautotab('transcript')\n\n# x='Hello World!'\n# s=slice(0,8,3)\n# print(x[s])\n\na = ['spam', 'egg', 'bacon', 'tomato', 'ham', 'lobster']\n# print(a[-1])\n# print(a[-2])\n# print(a[-5])\n# print(a[-len(a)])\n# print(a[:-2])\n# print(a[2:])\nprint(a[2:-2])\n",
        "created_at": "2024-08-06T18:00:55.783Z",
        "updated_at": "2024-08-06T18:00:55.783Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 401,
        "name": "019_if_in",
        "description": "# 2024-06-12 16:51",
        "code": "# In membership.\n\nautotab('transcript')\n\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\", \"mango\"]\nprint('cherry' not in fruits)\n",
        "created_at": "2024-08-06T18:00:55.873Z",
        "updated_at": "2024-08-06T18:00:55.873Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 402,
        "name": "020_list_comprehension",
        "description": "# 2024-06-12 16:51",
        "code": "# List comprehension\n\nautotab('transcript')\n\n# fruits = ['apple', 'banana', 'cherry', 'kiwi', 'mango']\n# newlist = []\n\n# for x in fruits:\n# newlist.append(x)\n\nnewlist = [x * x for x in range(11) if x % 2 == 0]\n\nprint(newlist)\n",
        "created_at": "2024-08-06T18:00:55.963Z",
        "updated_at": "2024-08-06T18:00:55.963Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 403,
        "name": "021_sets",
        "description": "# 2024-06-12 16:51",
        "code": "# Sets\n\nautotab('transcript')\n\nx = {'a': 123, 'b': 456, 'c': 789}\n\n# x = {'a', 'b', 'c'}\n\nprint(x)\n",
        "created_at": "2024-08-06T18:00:56.047Z",
        "updated_at": "2024-08-06T18:00:56.047Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 404,
        "name": "022_multi_assign",
        "description": "# 2024-06-12 16:51",
        "code": "# multi_assign\n\nautotab('transcript')\n\n[a1, b1, c1] = [9, 8, 7]\n(a2, b2, c2) = (77, 88, 99)\na3, b3, c3 = 111, 222, 333\nprint(a1, b1, c1)\nprint(a2, b2, c2)\nprint(a3, b3, c3)\n",
        "created_at": "2024-08-06T18:00:56.127Z",
        "updated_at": "2024-08-06T18:00:56.127Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 405,
        "name": "023_stepping",
        "description": "# 2024-06-12 16:51",
        "code": "# stepping\n\nautotab('transcript')\n\ni = 0\nx = 0\n\nwhile i < 10:\n    i = i + 1\n    x = x + i\n    print(i, x)\n\nprint('done')\n",
        "created_at": "2024-08-06T18:00:56.214Z",
        "updated_at": "2024-08-06T18:00:56.214Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 406,
        "name": "024_board_test",
        "description": "# 2024-06-12 16:51",
        "code": "# board_test\n\nautotab('board')\n\ncurrent_player = 'X'\n\n\ndef next_turn():\n    global current_player\n    if current_player == 'X':\n        current_player = 'O'\n    else:\n        current_player = 'X'\n    print('next_turn', current_player)\n\n\ndef tictactoe_click_handler(row, col, text):\n    print('handler', text)\n    if text == 'X':\n        message('toast', 'Tile already taken.')\n        return\n    elif text == 'O':\n        message('toast', 'Tile already taken.')\n        return\n    else:\n        board('set_tile_text', row, col, current_player)\n        next_turn()\n\n\nboard('set_handler', 'tile_clicked', tictactoe_click_handler)\n\nprint('done')\n",
        "created_at": "2024-08-06T18:00:56.300Z",
        "updated_at": "2024-08-06T18:00:56.300Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 407,
        "name": "000_example_05",
        "description": "",
        "code": "# 000_example_05\n\nautotab('transcript')\n\ndef fn(x):\n    print('FN', x)\n\nurl = 'resource/data/sample_01.json'\n\nfetch(url, fn)\n",
        "created_at": "2024-08-06T18:00:56.383Z",
        "updated_at": "2024-08-06T18:00:56.383Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 408,
        "name": "000_example_02",
        "description": "# 000_example_02\n# 2024-07-31 16:48\n",
        "code": "# 000_example_02\n\n# autotab('transcript')\n\nprint(3+4)\n# sleep(5)\n# widget('create', 'panel')\n# print('TWO')\n",
        "created_at": "2024-08-06T18:00:56.466Z",
        "updated_at": "2024-08-06T18:00:56.466Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 409,
        "name": "000_example_01",
        "description": "# 000_example_01\n# 2024-07-31 16:48\n",
        "code": "# 000_example_01\n\nautotab('transcript')\n\nfor i in range(1, 26):\n    print('i =', i, i*i)\n",
        "created_at": "2024-08-06T18:00:56.548Z",
        "updated_at": "2024-08-06T18:00:56.548Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 410,
        "name": "000_example_04",
        "description": "",
        "code": "# 000_example_04\n\n# Chicklet visits Rusty\n\nchick_col = 0\nchick_row = 0\nhen_row = 0\nhen_col = 0\nrusty_col = 6\nrusty_row = 0\nsize = 7\n\nautotab('board')\nboard('set_size', size)\n\ndef show_hen_and_chick():\n    popup('toast', 'Chicklet is home with Henrietta, his mother...')\n    sleep(2)\n    board('set_tile_image', hen_row, hen_col, 'hen_with_chick.jpg')\n    sleep(2)\n    \ndef add_rusty():\n    popup('toast', 'Rusty is in his dog house...')\n    sleep(2)\n    board('set_tile_image', rusty_row, rusty_col, 'dog_at_home.png')\n    sleep(2)\n    \ndef turn_chick_left():\n    global chick_row, chick_col\n    board('set_tile_image', chick_row, chick_col, 'chick_left.png')\n    sleep(3)\n    \ndef turn_chick_right():\n    global chick_row, chick_col\n    board('set_tile_image', chick_row, chick_col, 'chick_right.png')\n    sleep(3)\n\ndef move_chick_left():\n    global chick_row, chick_col\n    board('move_tile', chick_row, chick_col, 'left')\n    chick_col = chick_col - 1\n    sleep(2)\n\ndef move_chick_right():\n    global chick_row, chick_col\n    board('move_tile', chick_row, chick_col, 'right')\n    chick_col = chick_col + 1\n    sleep(2)\n    \ndef chick_walks_left():\n    while chick_col > 1:\n        move_chick_left()\n\ndef chick_walks_right():\n    while chick_col < size - 2:\n        move_chick_right()\n    \ndef chicklet_talks_to_rusty():\n    popup('toast', 'Chicklet says', 'Hi Rusty!', 'My name is Chicklet...')\n    sleep(3)\n    popup('toast', 'Rusty says', 'It is good to meet you Chicklet!')\n    sleep(3)\n    popup('toast', 'Chicklet says', 'I am going home now.')\n    sleep(3)\n    popup('toast', 'Rusty says', 'Goodbye Chicklet.')\n    sleep(3)\n    turn_chick_left()\n    sleep(3)\n    popup('toast', 'Chicklet says', 'Goodbye Rusty.')\n    sleep(3)\n    \ndef chicklet_leaves_home():\n    global chick_row, chick_col\n    popup('toast', 'Chicklet says', 'I am going to visit Rusty...')\n    turn_chick_right()\n    sleep(3)\n    move_chick_right()\n    sleep(3)\n    board('set_tile_image', hen_row, hen_col, 'hen_right.jpg')\n\ndef chicklet_returns_home():\n    global chick_row, chick_col\n    popup('toast', 'Henrietta says', 'Welcome home Chicklet...')\n    sleep(3)\n    popup('toast', 'Henrietta says', 'Come inside now')\n    sleep(3)\n    move_chick_left()\n    board('set_tile_image', hen_row, hen_col, 'hen_with_chick.jpg')\n    sleep(3)\n    popup('toast', 'End of story')\n\n# story starts here\nshow_hen_and_chick()\nadd_rusty()\nchicklet_leaves_home()\nchicklet_leaves_home()\nchick_walks_right()\nchicklet_talks_to_rusty()\nchick_walks_left()\nchicklet_returns_home()\n",
        "created_at": "2024-08-06T18:00:56.634Z",
        "updated_at": "2024-08-06T18:00:56.634Z",
        "code_object": null,
        "author": null,
        "details": null
    },
    {
        "id": 411,
        "name": "000_example_03",
        "description": "# 000_example_03\n# 2024-07-31 18:34\n",
        "code": "# 000_example_03\n\nautotab('board')\n\nrow = 0\ncol = 0\n\ndef add_chick(r, c):\n    global row, col\n    popup('toast', 'Add Chicklet to board...')\n    sleep(2)\n    row = r\n    col = c\n    board('set_tile_image', row, col, 'chick_right')\n    sleep(2)\n\ndef move_down():\n    global row, col\n    popup('toast', 'Chicklet moves down...')\n    sleep(2)\n    board('move_tile', row, col, 'down')\n    row = row + 1\n    sleep(2)\n\ndef move_left():\n    global row, col\n    popup('toast', 'Chicklet moves left...')\n    sleep(2)\n    board('move_tile', row, col, 'left')\n    col = col - 1\n    sleep(2)\n\ndef move_right():\n    global row, col\n    popup('toast', 'Chicklet moves right...')\n    sleep(2)\n    board('move_tile', row, col, 'right')\n    col = col + 1\n    sleep(2)\n    \ndef move_up():\n    global row, col\n    popup('toast', 'Chicklet moves up...')\n    sleep(2)\n    board('move_tile', row, col, 'up')\n    row = row - 1\n    sleep(2)\n\n# add and move chick\nadd_chick(0, 0)\nmove_right()\nmove_down()\nmove_right()\nmove_down()\nmove_left()\nmove_left()\nmove_up()\nmove_up()\n",
        "created_at": "2024-08-06T18:00:56.723Z",
        "updated_at": "2024-08-06T18:00:56.723Z",
        "code_object": null,
        "author": null,
        "details": null
    }
]